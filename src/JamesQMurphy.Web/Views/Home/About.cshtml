
@{
    ViewData["Title"] = "About";
}

<article>
    <h1>About This Site</h1>

    <p>
        I've always wanted to build a living, breathing site with Continuous Integration/Continuous Deployment tools -- and blog
        about it.  So why not build the blog website itself?  Here are the main elements of the CI/CD process:
    </p>

    <h4>Source Control - Github</h4>
    <a href="https://github.com/JamesQMurphy/www-jamesqmurphy-com">https://github.com/JamesQMurphy/www-jamesqmurphy-com</a>
    <p></p>

    <h4>Build and Deploy - Azure DevOps Services</h4>
    <a href="https://dev.azure.com/jamesqmurphy/www-jamesqmurphy-com">https://dev.azure.com/jamesqmurphy/www-jamesqmurphy-com</a>
    <p></p>

    <h4>Hosting - Amazon Web Services</h4>
    <a href="https://aws.amazon.com/">https://aws.amazon.com/</a>
    <p></p>

    <h1>About Me</h1>

    <p>
        I'm JamesQMurphy and I've been doing DevOps since before they've been calling it DevOps -- which isn't <i>that</i> long ago.
        I've loved coding since I was eleven years old, but I also developed a love of the <i>process</i> of creating software.  It's
        also part of why I studied Chemical Engineering at college; the two disciplines do share a connection in that arena.
    </p>
    <p>
        My first real software job was working on a shrink-wrapped software package, as part of a team of four developers.  This was
        <i>way</i> back in 1995, so Windows 3.1 was still the primary operating system of the day (most organizations didn't adopt
        Windows 95 until the next couple of years).  In addition to writing the software package's calculation engine, I also developed
        the installation package (using Wyse) and helped introduce version control (SourceSafe).  I would be the one to build the
        software -- always taking the latest version from SourceSafe, and always using the same batch file -- before creating the
        installation package and handing the diskettes to my manager, who inserted them into his diskette duplicating machine.
        (It even printed the labels!)  Since those days, I've worked at many different types of companies, in all sorts of
        industries, but I always gravitated to the "build and release" side of things, mostly because it was a chance to relive my
        chemical engineering days by building a "software factory".
    </p>
    <p>
        I think I first became aware of the "DevOps" term when I was Googling for stories between developers and operations.
        At the time, I worked for a software-as-a-service company, and relations between the development and the operations
        teams were strained, to say the least.  The developers always claimed that the operations team "messed things up", and the
        ops guys constantly complained about the developers blaming all of the software problems on them.  (And they both had
        a point, for what it was worth.)  By some ironic twist of
        fate, I was relocated into the same part of the office as the ops team, and I got to know them.  I also started to
        hear some of their conversations, and before long, I started to see things from their point of view.  I asked questions.
        I listened.  I <i>learned</i>.
        It wasn't long before I became a sort-of emissary between the development and the operations team.  When the
        developers asked me to troubleshoot a "network connection problem," I would actually strive to figure out if it was a
        DNS resolution problem, or a routing problem.  The ops guys, who were used to hearing "hey it's broken, fix it," were
        much more receptive to questions like, "When I run NSLOOKUP I get this IP address, shouldn't it be that IP address?"
        I had become a DevOps engineer and I didn't even know it.
    </p>
</article>
