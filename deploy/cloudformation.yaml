AWSTemplateFormatVersion: 2010-09-09

Parameters:
  VersionNumberParameter:
    Type: String
    Description: Version number of build

  S3BucketForCodeParameter:
    Type: String
    Description: S3 Bucket where code is located

  S3BucketPathForCodeParameter:
    Type: String
    Description: Path to code inside of bucket.  Include the zip filename, but do not include a leading backslash.

  S3BucketPathForStaticFilesParameter:
    Type: String
    Description: Path to static files inside of bucket.  Do not include a leading backslash.

  S3BucketPathForBlogImagesParameter:
    Type: String
    Description: Path to blog images folder inside of bucket.  Do not include a leading backslash.
    Default: demo_blogimages

  S3BucketPathForEmailSenderParameter:
    Type: String
    Description: Path to Email Sender inside of bucket.  Include the zip filename, but do not include a leading backslash.

  S3BucketPathForLogProcessingParameter:
    Type: String
    Description: Path to processing script inside of bucket.  Include the zip filename, but do not include a leading backslash.

  StageParameter:
    Type: String
    Description: Stage (environment)
    Default: dev

  DynamoDbTableBlogArticlesParameter:
    Type: String
    Description: Name of the DynamoDB table for blog articles
    Default: prod-blog

  DynamoDbIndexBlogArticlesParameter:
    Type: String
    Description: Name of the DynamoDB index for blog articles
    Default: articleType-timestamp-index

  DynamoDbTableUsersParameter:
    Type: String
    Description: Name of the DynamoDB table for users
    Default: dev-users

  DomainNameParameter:
    Type: String
    Description: Custom Domain Name (e.g., www.jamesqmurphy.com).  Leave blank if not mapping to a custom URL.
    Default: ''

  WarmUrlParameter:
    Type: String
    Description: URL for CloudWatch to call to keep Lambda function warm
    Default: '/warm'

  CertificateArnParameter:
    Type: String
    Description: Certificate ARN.  Leave blank if not mapping to a custom URL.
    Default: ''

  AppNameParameter:
    Type: String
    Description: 'Name of app to use in descriptions, etc.'
    Default: JamesQMurphyWeb

  ApiGatewayStageNameParameter:
    Type: String
    Description: Name to use for the API Gateway Stage
    Default: website


Conditions:
   AreMappingToCustomDomain: !Not [!Equals [!Ref DomainNameParameter, '']]
   AreWarmingTheLambda: !Not [!Equals [!Ref WarmUrlParameter, '']]

Resources:

  TheRoleForTheLambdaFunction:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudwatchWriteOnlyAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: !Sub DynamoDbReadOnlyAccess-${DynamoDbTableBlogArticlesParameter}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:Describe*'
                  - 'dynamodb:List*'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDbTableBlogArticlesParameter}*'
        - PolicyName: !Sub DynamoDbReadWriteAccess-${DynamoDbTableUsersParameter}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:Describe*'
                  - 'dynamodb:List*'
                  - 'dynamodb:Get*'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDbTableUsersParameter}*'
        - PolicyName: !Sub SSM-WriteParameters
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:PutParameter'
                  - 'ssm:AddTagsToResource'
                  - 'ssm:GetParametersByPath'
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AppNameParameter}-${StageParameter}*'
        - PolicyName: !Sub SQS-SendMessage-${StageParameter}-EmailQueue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ChangeMessageVisibility'
                  - 'sqs:ChangeMessageVisibilityBatch'
                  - 'sqs:SendMessage'
                  - 'sqs:SendMessageBatch'
                Resource: !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${StageParameter}-EmailQueue'
        - PolicyName: 'SendEmailAs-no-reply@jamesqmurphy.com'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                Effect: Allow
                Action:
                  - 'ses:SendEmail'
                  - 'ses:SendRawEmail'
                Resource: '*'
                Condition:
                  StringEquals:
                    'ses:FromAddress': "no-reply@jamesqmurphy.com"


  TheRoleForTheEmailSenderLambdaFunction:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudwatchWriteOnlyAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: !Sub SQS-ReceiveMessage-${StageParameter}-EmailQueue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource: !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${StageParameter}-EmailQueue'
        - PolicyName: 'SendEmailAs-no-reply@jamesqmurphy.com'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                Effect: Allow
                Action:
                  - 'ses:SendEmail'
                  - 'ses:SendRawEmail'
                Resource: '*'
                Condition:
                  StringEquals:
                    'ses:FromAddress': "no-reply@jamesqmurphy.com"


  TheRoleForTheApiGateway:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudwatchWriteOnlyAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'


  TheRoleForTheLogProcessingLambdaFunction:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudwatchWriteOnlyAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'


  TheEmailDeadLetterQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 1209600
      QueueName: !Sub ${StageParameter}-EmailQueue-Failed
      ReceiveMessageWaitTimeSeconds: 20
      VisibilityTimeout: 300


  TheEmailQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 604800
      QueueName: !Sub ${StageParameter}-EmailQueue
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TheEmailDeadLetterQueue.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 300


  TheLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref S3BucketForCodeParameter
        S3Key: !Ref S3BucketPathForCodeParameter
      Description: !Sub Hosts ${AppNameParameter}-${VersionNumberParameter} ${StageParameter} ASP.NET Core application.  Created via CloudFormation stack ${AWS::StackName}.
      FunctionName: !Sub '${AppNameParameter}-${StageParameter}'
      Handler: JamesQMurphy.Web::JamesQMurphy.Web.LambdaEntryPoint::FunctionHandlerAsync
      MemorySize: 512
      Role: !GetAtt TheRoleForTheLambdaFunction.Arn
      Runtime: provided  # custom runtime
      Timeout: 15
      Environment:
        Variables:
          AppName: !Sub '${AppNameParameter}-${StageParameter}'
          ImageBasePath: /blogimages
          DataProtection: AWS
          ArticleStore__Service: DynamoDb
          ArticleStore__DynamoDbTableName: !Ref DynamoDbTableBlogArticlesParameter
          ArticleStore__DynamoDbIndexName: !Ref DynamoDbIndexBlogArticlesParameter
          UserStore__Service: DynamoDb
          UserStore__DynamoDbTableName: !Ref DynamoDbTableUsersParameter
          UserStore__UserNameIndex: "normalizedUserName-index"
          Email__Service: SQS
          Email__QueueUrl: !Sub 'https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${StageParameter}-EmailQueue'
      Tags:
        - Key: app
          Value: !Ref AppNameParameter
        - Key: version
          Value: !Ref VersionNumberParameter


  TheScheduledRuleToWarmTheLambda: 
    Type: AWS::Events::Rule
    Condition: AreWarmingTheLambda
    Properties: 
      Description: Calls the Lambda function every 5 minutes to keep it warm
      ScheduleExpression: "rate(5 minutes)"
      State: "ENABLED"
      Targets: 
        - Arn: !GetAtt TheLambdaFunction.Arn
          Id: TheLambdaToWarm
          Input: !Sub '{"httpMethod":"GET","path":"${WarmUrlParameter}"}'


  TheLambdaInvokePermissionForEvents: 
    Type: AWS::Lambda::Permission
    Condition: AreWarmingTheLambda
    Properties: 
      FunctionName: !Ref TheLambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt TheScheduledRuleToWarmTheLambda.Arn


  TheGatewayRestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub ${AppNameParameter}-${VersionNumberParameter}-${StageParameter}
      Description: !Sub ${AppNameParameter}-${VersionNumberParameter} ${StageParameter}. Created via CloudFormation stack ${AWS::StackName}.
      BinaryMediaTypes:
        - '*/*'
      EndpointConfiguration:
        Types:
          - REGIONAL


  TheRootGetMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TheLambdaFunction.Arn}/invocations
      ResourceId: !GetAtt TheGatewayRestAPI.RootResourceId
      RestApiId: !Ref TheGatewayRestAPI


  TheProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref TheGatewayRestAPI
      ParentId: !GetAtt TheGatewayRestAPI.RootResourceId
      PathPart: '{proxy+}'


  TheProxyAnyMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref TheGatewayRestAPI
      ResourceId: !Ref TheProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TheLambdaFunction.Arn}/invocations


  TheFavIconResourceStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub 'https://${S3BucketForCodeParameter}.s3.amazonaws.com/${S3BucketPathForStaticFilesParameter}/cf-apiGatewayToS3.yaml'
      TimeoutInMinutes: 10
      Parameters:
        RestApiIdParameter: !Ref TheGatewayRestAPI
        ParentResourceIdParameter: !GetAtt TheGatewayRestAPI.RootResourceId
        ApiResourceNameParameter: favicon.ico
        S3BucketPathParameter: !Sub '${S3BucketForCodeParameter}/${S3BucketPathForStaticFilesParameter}/favicon.ico'
        IsPathParameter: false
        MaxAgeParameter: 600


  TheDistResourceStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub 'https://${S3BucketForCodeParameter}.s3.amazonaws.com/${S3BucketPathForStaticFilesParameter}/cf-apiGatewayToS3.yaml'
      TimeoutInMinutes: 10
      Parameters:
        RestApiIdParameter: !Ref TheGatewayRestAPI
        ParentResourceIdParameter: !GetAtt TheGatewayRestAPI.RootResourceId
        ApiResourceNameParameter: dist
        S3BucketPathParameter: !Sub '${S3BucketForCodeParameter}/${S3BucketPathForStaticFilesParameter}/dist'


  TheBlogImagesResourceStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub 'https://${S3BucketForCodeParameter}.s3.amazonaws.com/${S3BucketPathForStaticFilesParameter}/cf-apiGatewayToS3.yaml'
      TimeoutInMinutes: 10
      Parameters:
        RestApiIdParameter: !Ref TheGatewayRestAPI
        ParentResourceIdParameter: !GetAtt TheGatewayRestAPI.RootResourceId
        ApiResourceNameParameter: blogimages
        S3BucketPathParameter: !Sub '${S3BucketForCodeParameter}/${S3BucketPathForBlogImagesParameter}'


  TheImagesResourceStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub 'https://${S3BucketForCodeParameter}.s3.amazonaws.com/${S3BucketPathForStaticFilesParameter}/cf-apiGatewayToS3.yaml'
      TimeoutInMinutes: 10
      Parameters:
        RestApiIdParameter: !Ref TheGatewayRestAPI
        ParentResourceIdParameter: !GetAtt TheGatewayRestAPI.RootResourceId
        ApiResourceNameParameter: images
        S3BucketPathParameter: !Sub '${S3BucketForCodeParameter}/${S3BucketPathForStaticFilesParameter}/images'


  TheDeploymentStage:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - TheRootGetMethod
      - TheProxyAnyMethod
      - TheDistResourceStack
      - TheBlogImagesResourceStack
      - TheImagesResourceStack
      - TheFavIconResourceStack
    Properties:
      Description: !Sub ${AppNameParameter}-${VersionNumberParameter} ${StageParameter}.  Created via CloudFormation stack ${AWS::StackName}.
      RestApiId: !Ref TheGatewayRestAPI
      StageName: !Ref ApiGatewayStageNameParameter


  TheLambdaInvokePermissionForProxyResource:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt TheLambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TheGatewayRestAPI}*


  TheCustomDomainName:
    Type: 'AWS::ApiGateway::DomainName'
    Condition: AreMappingToCustomDomain
    Properties:
      DomainName: !Ref DomainNameParameter
      RegionalCertificateArn: !Ref CertificateArnParameter
      EndpointConfiguration:
        Types:
          - REGIONAL


  TheBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Condition: AreMappingToCustomDomain
    DependsOn:
      - TheDeploymentStage
    Properties:
      DomainName: !Ref TheCustomDomainName
      RestApiId: !Ref TheGatewayRestAPI
      Stage: !Ref ApiGatewayStageNameParameter


  TheEmailSenderLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref S3BucketForCodeParameter
        S3Key: !Ref S3BucketPathForEmailSenderParameter
      Description: !Sub Sends emails for ${AppNameParameter}-${VersionNumberParameter} ${StageParameter}.  Created via CloudFormation stack ${AWS::StackName}.
      FunctionName: !Sub 'EmailSender-${AppNameParameter}-${StageParameter}'
      Handler: JamesQMurphy.Lambda.EmailSender::JamesQMurphy.Lambda.EmailSender.LambdaEntryPoint::Handler
      MemorySize: 320
      Role: !GetAtt TheRoleForTheEmailSenderLambdaFunction.Arn
      Runtime: dotnetcore2.1
      Timeout: 30


  TheEmailSenderEventSourceMapping:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      EventSourceArn: !GetAtt TheEmailQueue.Arn
      FunctionName: !Ref TheEmailSenderLambdaFunction


  TheLogProcessingLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref S3BucketForCodeParameter
        S3Key: !Ref S3BucketPathForLogProcessingParameter
      Description: !Sub Processes logs for ${AppNameParameter}-${VersionNumberParameter} ${StageParameter}.  Created via CloudFormation stack ${AWS::StackName}.
      FunctionName: !Sub 'ProcessLogs-${AppNameParameter}-${StageParameter}'
      Handler: ProcessCloudWatchLogs::ProcessCloudWatchLogs.Bootstrap::ExecuteFunction
      MemorySize: 320
      Role: !GetAtt TheRoleForTheLogProcessingLambdaFunction.Arn
      Runtime: dotnetcore2.1
      Timeout: 15


  TheLambdaInvokePermissionForCloudWatchResource:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt TheLogProcessingLambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: !Sub logs.${AWS::Region}.amazonaws.com
      SourceArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:API-Gateway-Execution-Logs_${TheGatewayRestAPI}/${ApiGatewayStageNameParameter}:*


  TheSubscriptionFilterForTheLogProcessingLambdaFunction:
    Type: 'AWS::Logs::SubscriptionFilter'
    Properties:
      DestinationArn: !GetAtt TheLogProcessingLambdaFunction.Arn
      FilterPattern:  ""
      LogGroupName: !Sub API-Gateway-Execution-Logs_${TheGatewayRestAPI}/${ApiGatewayStageNameParameter}


Outputs:
  GatewayApiUrl:
    Description: The Url to the Gateway API
    Value: !Sub https://${TheGatewayRestAPI}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${ApiGatewayStageNameParameter}

  SiteUrl:
    Description: The Url to the site
    Value: !Sub https://${DomainNameParameter}
    Condition: AreMappingToCustomDomain

  TargetDomainName:
    Description: Target domain name for DNS mapping
    Value: !GetAtt TheCustomDomainName.RegionalDomainName
    Condition: AreMappingToCustomDomain
