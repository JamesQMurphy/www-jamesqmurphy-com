AWSTemplateFormatVersion: 2010-09-09

Parameters:
  VersionNumberParameter:
    Type: String
    Description: Version number of build

  S3BucketForCodeParameter:
    Type: String
    Description: S3 Bucket where code is located

  S3BucketPathForCodeParameter:
    Type: String
    Description: Path to code inside of bucket.  Include the zip filename, but do not include a leading backslash.

  StageParameter:
    Type: String
    Description: Stage (environment)
    Default: dev

  AppNameParameter:
    Type: String
    Description: 'Name of app to use in descriptions, etc.'
    Default: JamesQMurphyWeb

  ApiGatewayStageNameParameter:
    Type: String
    Description: Name to use for the API Gateway Stage
    Default: website


Resources:

  TheRoleForTheLambdaFunction:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudwatchWriteOnlyAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'


  TheLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref S3BucketForCodeParameter
        S3Key: !Ref S3BucketPathForCodeParameter
      Description: !Sub Hosts ${AppNameParameter}-${VersionNumberParameter} ${StageParameter} ASP.NET Core application.  Created via CloudFormation stack ${AWS::StackName}.
      # Lambda does not allow periods in function names, so to include the version number,
      # we need to replace the periods with something else (hyphens in this case)
      FunctionName: !Join
        - '-'
        - - !Ref AppNameParameter
            # These !Select functions parse out the pieces of the version number
          - !Select [0, !Split [".", !Ref VersionNumberParameter]]
          - !Select [1, !Split [".", !Sub '${VersionNumberParameter}.' ]]
          - !Select [2, !Split [".", !Sub '${VersionNumberParameter}..' ]]
          - !Select [3, !Split [".", !Sub '${VersionNumberParameter}...' ]]
          - !Select [4, !Split [".", !Sub '${VersionNumberParameter}....' ]]
          - !Ref StageParameter
      Handler: JamesQMurphy.Web::JamesQMurphy.Web.LambdaEntryPoint::FunctionHandlerAsync
      MemorySize: 512
      Role: !GetAtt TheRoleForTheLambdaFunction.Arn
      Runtime: provided  # custom runtime
      Timeout: 15
      Tags:
        - Key: app
          Value: !Ref AppNameParameter
        - Key: version
          Value: !Ref VersionNumberParameter


  TheGatewayRestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub ${AppNameParameter}-${StageParameter}
      Description: !Sub ${AppNameParameter}-${VersionNumberParameter} ${StageParameter}. Created via CloudFormation stack ${AWS::StackName}.
      EndpointConfiguration:
        Types:
          - REGIONAL


  TheRootGetMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TheLambdaFunction.Arn}/invocations
      ResourceId: !GetAtt TheGatewayRestAPI.RootResourceId
      RestApiId: !Ref TheGatewayRestAPI


  TheProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref TheGatewayRestAPI
      ParentId: !GetAtt TheGatewayRestAPI.RootResourceId
      PathPart: '{proxy+}'


  TheProxyAnyMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref TheGatewayRestAPI
      ResourceId: !Ref TheProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TheLambdaFunction.Arn}/invocations


  TheDeploymentStage:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - TheRootGetMethod
      - TheProxyAnyMethod
    Properties:
      Description: !Sub ${AppNameParameter}-${VersionNumberParameter} ${StageParameter}.  Created via CloudFormation stack ${AWS::StackName}.
      RestApiId: !Ref TheGatewayRestAPI
      StageName: !Ref ApiGatewayStageNameParameter


  TheLambdaInvokePermissionForProxyResource:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt TheLambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TheGatewayRestAPI}*


Outputs:
  GatewayApiUrl:
    Description: The Url to the Gateway API
    Value: !Sub https://${TheGatewayRestAPI}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${ApiGatewayStageNameParameter}
