{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Parameters": {
        "VersionNumberParameter":{
            "Type": "String",
            "Description": "Version number of build"
        },
        "S3BucketForCodeParameter":{
            "Type": "String",
            "Description": "S3 Bucket where code is located"
        },
        "S3BucketPathForCodeParameter":{
            "Type": "String",
            "Description": "Path to code inside of bucket.  Do not include a leading backslash."
        },
        "StageParameter":{
            "Type": "String",
            "Description": "Stage (environment)",
            "Default": "dev"
        },
        "AppNameParameter":{
            "Type": "String",
            "Description": "Name of app to use in descriptions, etc.",
            "Default": "JamesQMurphyWeb"
        }
    },

    "Resources": {
        "TheRoleForTheLambdaFunction": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement":
                    [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [ "lambda.amazonaws.com" ]
                            },
                            "Action": [ "sts:AssumeRole" ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName" : "CloudwatchWriteOnlyAccess",
                        "PolicyDocument" : {
                            "Version" : "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },

        "TheLambdaFunction" : {
            "Type" : "AWS::Lambda::Function",
            "Properties" : {
                "Code" : {
                    "S3Bucket" : {"Ref": "S3BucketForCodeParameter"},
                    "S3Key" : {"Ref": "S3BucketPathForCodeParameter"}
                },
                "Description" : { "Fn::Sub": "Hosts ${AppNameParameter}-${VersionNumberParameter} ${StageParameter} ASP.NET Core application.  Created via CloudFormation stack ${AWS::StackName}."},
                "FunctionName" : {"Fn::Join": ["-",[
                    { "Ref": "AppNameParameter"},
                    { "Fn::Select" : [ "0", { "Fn::Split" : [ "." , {"Ref": "VersionNumberParameter"} ] }] },
                    { "Fn::Select" : [ "1", { "Fn::Split" : [ "." , { "Fn::Join": ["", [{"Ref": "VersionNumberParameter"},"."]]} ] }] },
                    { "Fn::Select" : [ "2", { "Fn::Split" : [ "." , { "Fn::Join": ["", [{"Ref": "VersionNumberParameter"},".."]]} ] }] },
                    { "Fn::Select" : [ "3", { "Fn::Split" : [ "." , { "Fn::Join": ["", [{"Ref": "VersionNumberParameter"},"..."]]} ] }] },
                    { "Fn::Select" : [ "4", { "Fn::Split" : [ "." , { "Fn::Join": ["", [{"Ref": "VersionNumberParameter"},"...."]]} ] }] },
                    { "Ref": "StageParameter"}
                ]] },
                "Handler" : "JamesQMurphy.Web::JamesQMurphy.Web.LambdaEntryPoint::FunctionHandlerAsync",
                "MemorySize" : 512,
                "Role" : { "Fn::GetAtt": ["TheRoleForTheLambdaFunction", "Arn"] },
                "Runtime" : "provided",
                "Timeout" : 15,
                "Tags" : [ 
                    {
                        "Key": "app",
                        "Value": { "Ref": "AppNameParameter" }
                    },
                    {
                        "Key": "version",
                        "Value": { "Ref": "VersionNumberParameter" }
                    }
                ]
            }
        },

        "TheGatewayRestAPI": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            { "Ref": "AppNameParameter" },
                            { "Ref": "StageParameter" }
                        ]
                    ]
                },
                "Description": { "Fn::Sub": "${AppNameParameter}-${VersionNumberParameter} ${StageParameter}.  Created via CloudFormation stack ${AWS::StackName}." },
                "EndpointConfiguration": { "Types": [ "REGIONAL" ] }
            }
        },

        "TheRootGetMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "GET",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TheLambdaFunction.Arn}/invocations" }
                },
                "ResourceId": { "Fn::GetAtt": [ "TheGatewayRestAPI", "RootResourceId" ] },
                "RestApiId": { "Ref": "TheGatewayRestAPI" }
            }
        },

        "TheProxyResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": { "Ref": "TheGatewayRestAPI" },
                "ParentId": { "Fn::GetAtt": [ "TheGatewayRestAPI", "RootResourceId" ] },
                "PathPart": "{proxy+}"
            }
        },

        "TheProxyAnyMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": { "Ref": "TheGatewayRestAPI" },
                "ResourceId": { "Ref": "TheProxyResource" },
                "HttpMethod": "ANY",
                "AuthorizationType": "NONE",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TheLambdaFunction.Arn}/invocations" }
                }
            }
        },

        "TheDeploymentStage": {
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": [ "TheRootGetMethod", "TheProxyAnyMethod" ],
            "Properties": {
                "Description": "Description of deployment",
                "RestApiId": { "Ref": "TheGatewayRestAPI" },
                "StageName": { "Ref": "StageParameter" }
            }
        },

        "TheLambdaInvokePermissionForProxyResource": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {"Fn::GetAtt": ["TheLambdaFunction", "Arn"]},
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": { "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TheGatewayRestAPI}*" }
            }
        }


    },

    "Outputs": {
        "GatewayApiUrl": {
            "Description": "The Url to the Gateway API",
            "Value": { "Fn::Sub": "https://${TheGatewayRestAPI}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${StageParameter}" }
        }
    }

}